name: Release

on:
  push:
    branches:
      - "**"

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.18.x]
        os: [linux, windows, macos]
        arch: [amd64, arm64]
        exclude:
          - os: macos
            arch: arm64 # Exclude this combination if your project doesn't support it.
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}
      
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
      
      - name: Build binary
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o myapp-${{ matrix.os }}-${{ matrix.arch }}
        shell: bash
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: myapp-${{ matrix.os }}-${{ matrix.arch }}
          path: myapp-${{ matrix.os }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# on:
#   push:
#     branches:
#       - '*'
#   # release:
#   #   types: [created]
#
# jobs:
#   releases-matrix:
#     name: Release Go Binary
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
#         goos: [linux, windows, darwin]
#         goarch: ["386", amd64, arm64]
#         binary_name: ["kl", "kli"]
#         exclude:
#           - goarch: "386"
#             goos: darwin
#           - goarch: arm64
#             goos: windows
#     steps:
#     - uses: actions/checkout@v3
#     - name: Extract tag name
#       id: tag_name
#       run: echo "::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}"
#     - uses: wangyoucao577/go-release-action@v1.46
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         goos: ${{ matrix.goos }}
#         goarch: ${{ matrix.goarch }}
#         goversion: "https://dl.google.com/go/go1.21.7.linux-amd64.tar.gz"
#         project_path: "."
#         ldflags: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.binary_name }}"
#         binary_name: ${{ matrix.binary_name }}
#         extra_files: LICENSE README.md
