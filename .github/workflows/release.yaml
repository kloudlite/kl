name: Conditional Builds Workflow

on: [push, pull_request]

jobs:
  build:
    name: Build ${{ matrix.app }}-${{ matrix.platform }}-${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        app: [kl,kli]
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
        arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            goos: linux
            platform: linux
          - os: windows-latest
            goos: windows
            platform: windows
          - os: macos-latest
            goos: darwin
            platform: darwin
          - os: macos-14
            goos: darwin
            platform: darwin
        exclude:
          - os: macos-14
            arch: amd64
          - os: macos-latest
            arch: arm64
          - os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4.1.1

      - name: Setup Go
        uses: actions/setup-go@v5.0.0
        with:
          go-version: '^1.19'

      - name: Set up QEMU
        if: matrix.arch == 'arm64' && matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64

      - name: Setup libappindicator3-dev for linux
        if: matrix.goos == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install gcc libgtk-3-dev libayatana-appindicator3-dev

      - name: Check Go version
        run: |
          go version
          echo "[PRE] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

      - name: Extract tag name
        id: tag_name
        # run: echo "::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}"
        run: echo "::set-output name=TAG_NAME::v1.0.5-nightly"

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.arch }}
          Flags: "\"-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ matrix.app }} -X github.com/kloudlite/kl/flags.DevMode=true\""
        run: |
          echo "[POST] GOOS: $(go env GOOS) GOARCH: $(go env GOARCH)"

          echo "Building for ${{ matrix.goos }}, ${{ matrix.arch }}"
          go build -o ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }} -ldflags=${{ env.Flags }} main.go

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }
          path: ${{ matrix.app }}-${{ steps.tag_name.outputs.TAG_NAME }}-${{ matrix.platform }}-${{ matrix.arch }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}/artifacts

      - name: Compress each binary individually (zip, tar)
        run: |
          for file in ${{ github.workspace }}/artifacts/*; do
            if [ -f "$file" ]; then
              echo "Compressing $file"
              zip -j $file.zip $file
              tar -czvf $file.tar.gz $file
            fi
          done


      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


# on:
#   release:
#     types: [created]
#
# jobs:
#   releases-matrix:
#     name: Release Go Binary
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         # build and publish in parallel: linux/386, linux/amd64, linux/arm64, windows/386, windows/amd64, darwin/amd64, darwin/arm64
#         goos: [linux, windows, darwin]
#         goarch: ["386", amd64, arm64]
#         exclude:
#           - goarch: "386"
#             goos: darwin
#           - goarch: arm64
#             goos: windows
#     steps:
#     - uses: actions/checkout@v3
#     - name: Extract tag name
#       id: tag_name
#       run: echo "::set-output name=TAG_NAME::${GITHUB_REF#refs/tags/}"
#     - uses: wangyoucao577/go-release-action@v1.30
#       with:
#         github_token: ${{ secrets.GITHUB_TOKEN }}
#         goos: ${{ matrix.goos }}
#         goarch: ${{ matrix.goarch }}
#         goversion: "https://dl.google.com/go/go1.19.1.linux-amd64.tar.gz"
#         project_path: "."
#         ldflags: "-X github.com/kloudlite/kl/flags.Version=${{ steps.tag_name.outputs.TAG_NAME }} -X github.com/kloudlite/kl/flags.CliName=${{ steps.determine_cli.outputs.CLI_TO_BUILD }}"
#         binary_name: ${{ steps.determine_cli.outputs.CLI_TO_BUILD }}
#         extra_files: LICENSE README.md
#
